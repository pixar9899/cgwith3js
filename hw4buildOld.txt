
        function buildModel() {
            let geometry = new THREE.Geometry();
            //斜邊高度
            let sq375 = Math.sqrt(3.75);

            //放入頂點
            geometry.vertices.push(new THREE.Vector3(-3.5, 0, 3.5));
            geometry.vertices.push(new THREE.Vector3(3.5, 0, 3.5));
            geometry.vertices.push(new THREE.Vector3(3.5, 10.5, 3.5));
            geometry.vertices.push(new THREE.Vector3(3.5, 10.5 + sq375, 0));
            geometry.vertices.push(new THREE.Vector3(-3.5, 10.5 + sq375, 0));
            geometry.vertices.push(new THREE.Vector3(-3.5, 10.5, 3.5));

            geometry.vertices.push(new THREE.Vector3(-3.5, 0, -3.5));
            geometry.vertices.push(new THREE.Vector3(3.5, 0, -3.5));
            geometry.vertices.push(new THREE.Vector3(3.5, 10.5, -3.5));
            geometry.vertices.push(new THREE.Vector3(-3.5, 10.5, -3.5));

            //中間一點讓兩邊可以上三角形做開喝飲料的位置
            geometry.vertices.push(new THREE.Vector3(0, 10.5 + sq375, 0));

            //最上面一條橫條黏膠的部分
            geometry.vertices.push(new THREE.Vector3(3.5, 10.5 + sq375 + 1.5, 0));
            geometry.vertices.push(new THREE.Vector3(-3.5, 10.5 + sq375 + 1.5, 0));

            //正面
            geometry.faces.push(createFace(0, 1, 2, 0));
            geometry.faces.push(createFace(0, 2, 5, 0));

            //背面
            geometry.faces.push(createFace(7, 6, 9, 1));
            geometry.faces.push(createFace(7, 9, 8, 1));

            //右面
            geometry.faces.push(createFace(1, 7, 8, 2));
            geometry.faces.push(createFace(1, 8, 2, 2));

            //左面
            geometry.faces.push(createFace(6, 0, 5, 3));
            geometry.faces.push(createFace(6, 5, 9, 3));

            //正面斜邊
            geometry.faces.push(createFace(5, 2, 3, 4));
            geometry.faces.push(createFace(5, 3, 4, 4));

            //背面斜邊
            geometry.faces.push(createFace(8, 9, 4, 5));
            geometry.faces.push(createFace(8, 4, 3, 5));

            //上面橫條
            geometry.faces.push(createFace(4, 3, 11, 6));
            geometry.faces.push(createFace(4, 11, 12, 6));
            //上面橫條後面
            geometry.faces.push(createFace(3, 4, 12, 7));
            geometry.faces.push(createFace(3, 12, 11, 7));

            /*----右面折進去的的三面，同一面----*/
            //靠前的背對的面
            geometry.faces.push(createFace(2, 10, 3, 8));
            //中間的面
            geometry.faces.push(createFace(2, 8, 10, 8));
            // //靠後的正對的面
            geometry.faces.push(createFace(8, 3, 10, 8));

            /*----左面折進去的的三面，同一面----*/
            //靠後的正對的面
            geometry.faces.push(createFace(9, 10, 4, 9));
            //中間的面
            geometry.faces.push(createFace(9, 5, 10, 9));
            //靠前的背對的面
            geometry.faces.push(createFace(5, 4, 10, 9));

            //上材質
            //正面
            geometry.faceVertexUvs[0].push([
                new THREE.Vector2(0, 0),
                new THREE.Vector2(1, 0),
                new THREE.Vector2(1, 1)
            ]);
            geometry.faceVertexUvs[0].push([
                new THREE.Vector2(0, 0),
                new THREE.Vector2(1, 1),
                new THREE.Vector2(0, 1)
            ]);
            //背面
            geometry.faceVertexUvs[0].push([
                new THREE.Vector2(0, 0),
                new THREE.Vector2(1, 0),
                new THREE.Vector2(1, 1)
            ]);
            geometry.faceVertexUvs[0].push([
                new THREE.Vector2(0, 0),
                new THREE.Vector2(1, 1),
                new THREE.Vector2(0, 1)
            ]);
            //右面
            geometry.faceVertexUvs[0].push([
                new THREE.Vector2(0, 0),
                new THREE.Vector2(1, 0),
                new THREE.Vector2(1, 1)
            ]);
            geometry.faceVertexUvs[0].push([
                new THREE.Vector2(0, 0),
                new THREE.Vector2(1, 1),
                new THREE.Vector2(0, 1)
            ]);
            //左面
            geometry.faceVertexUvs[0].push([
                new THREE.Vector2(0, 0),
                new THREE.Vector2(1, 0),
                new THREE.Vector2(1, 1)
            ]);
            geometry.faceVertexUvs[0].push([
                new THREE.Vector2(0, 0),
                new THREE.Vector2(1, 1),
                new THREE.Vector2(0, 1)
            ]);
            //正面斜邊
            geometry.faceVertexUvs[0].push([
                new THREE.Vector2(0, 0),
                new THREE.Vector2(1, 0),
                new THREE.Vector2(1, 1)
            ]);
            geometry.faceVertexUvs[0].push([
                new THREE.Vector2(0, 0),
                new THREE.Vector2(1, 1),
                new THREE.Vector2(0, 1)
            ]);
            //背面斜邊
            geometry.faceVertexUvs[0].push([
                new THREE.Vector2(0, 0),
                new THREE.Vector2(1, 0),
                new THREE.Vector2(1, 1)
            ]);
            geometry.faceVertexUvs[0].push([
                new THREE.Vector2(0, 0),
                new THREE.Vector2(1, 1),
                new THREE.Vector2(0, 1)
            ]);
            //上面橫條
            geometry.faceVertexUvs[0].push([
                new THREE.Vector2(0, 0),
                new THREE.Vector2(1, 0),
                new THREE.Vector2(1, 1)
            ]);
            geometry.faceVertexUvs[0].push([
                new THREE.Vector2(0, 0),
                new THREE.Vector2(1, 1),
                new THREE.Vector2(0, 1)
            ]);
            //上面橫條後面
            geometry.faceVertexUvs[0].push([
                new THREE.Vector2(0, 0),
                new THREE.Vector2(1, 0),
                new THREE.Vector2(1, 1)
            ]);
            geometry.faceVertexUvs[0].push([
                new THREE.Vector2(0, 0),
                new THREE.Vector2(1, 1),
                new THREE.Vector2(0, 1)
            ]);
            //右邊內凹
            geometry.faceVertexUvs[0].push([
                new THREE.Vector2(0, 0),
                new THREE.Vector2(0.5, 1
                ), new THREE.Vector2(0, 1)
            ]);
            geometry.faceVertexUvs[0].push([
                new THREE.Vector2(0, 0),
                new THREE.Vector2(1, 0),
                new THREE.Vector2(0.5, 1)
            ]);
            geometry.faceVertexUvs[0].push([
                new THREE.Vector2(1, 0),
                new THREE.Vector2(1, 1),
                new THREE.Vector2(0.5, 1)
            ]);
            //左邊內凹
            geometry.faceVertexUvs[0].push([
                new THREE.Vector2(0, 0),
                new THREE.Vector2(0.5, 1
                ), new THREE.Vector2(0, 1)
            ]);
            geometry.faceVertexUvs[0].push([
                new THREE.Vector2(0, 0),
                new THREE.Vector2(1, 0),
                new THREE.Vector2(0.5, 1)
            ]);
            geometry.faceVertexUvs[0].push([
                new THREE.Vector2(1, 0),
                new THREE.Vector2(1, 1),
                new THREE.Vector2(0.5, 1)
            ]);
            //底部
            geometry.faceVertexUvs[0].push([
                new THREE.Vector2(1, 0),
                new THREE.Vector2(1, 1),
                new THREE.Vector2(0.5, 1)
            ]);
            geometry.faceVertexUvs[0].push([
                new THREE.Vector2(1, 0),
                new THREE.Vector2(1, 1),
                new THREE.Vector2(0.5, 1)
            ]);
            //要先計算Face然後再計算頂點，這樣才能知道要光源要怎計算
            geometry.computeFaceNormals();
            geometry.computeVertexNormals();

            let loader = new THREE.TextureLoader();
            loader.crossOrigin = '';
            let positive = loader.load('TryItTea/positive.png');
            let negative = loader.load('TryItTea/negative.png');
            let right = loader.load('TryItTea/right.png');
            let left = loader.load('TryItTea/left.png');
            let positive_oblique = loader.load('TryItTea/positive_oblique.png');
            let negative_oblique = loader.load('TryItTea/negative_oblique.png');
            let positive_top = loader.load('TryItTea/positive_top.png');
            let negative_top = loader.load('TryItTea/negative_top.png');
            let right_oblique = loader.load('TryItTea/right_oblique.png');
            let left_oblique = loader.load('TryItTea/left_oblique.png');
            materialArray = [];
            materialArray.push(
                createTextureMaterial(positive),
                createTextureMaterial(negative),
                createTextureMaterial(right),
                createTextureMaterial(left),
                createTextureMaterial(positive_oblique),
                createTextureMaterial(negative_oblique),
                createTextureMaterial(positive_top, 0.5),
                createTextureMaterial(negative_top, 0.5),
                new THREE.MeshLambertMaterial({
                    //side: THREE.DoubleSide, // 雙面材質
                    map: right_oblique,
                }),
                new THREE.MeshLambertMaterial({
                    //side: THREE.DoubleSide, // 雙面材質
                    map: left_oblique,
                })
            );
            return new THREE.Mesh(geometry, materialArray);
        }
